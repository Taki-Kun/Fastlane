# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  before_all do |lane, options|
    # git_pull
    ENV["GIT_BRANCH"] = git_branch
    ENV['GETVERSIONNAME_GRADLE_FILE_PATH'] = 'HelloTalk/build.gradle'
    ENV['GETVERSIONCODE_GRADLE_FILE_PATH'] = 'HelloTalk/build.gradle'
    ENV['GETVERSIONNAME_EXT_CONSTANT_NAME'] = 'versionName'
    ENV['GETVERSIONCODE_EXT_CONSTANT_NAME'] = 'versionCode'
    ENV['VERSIONNAME'] = get_version_name
    ENV['VERSIONCODE'] = get_version_code
    gradle(
      task: "-v"
    )
    gradle(
      task: "clean"
    )
  end

  before_each do |lane, options|
    # ...
  end

  # desc "Runs all the tests"
  # lane :test do
    # gradle(task: "test")
  # end

  desc "Submit a new Beta Build to Beta"
  lane :do_publish_beta do |options|
    gradle(
      task: "assemble",
      flavor: options[:app],
      build_type: "Release",
      # print_command: false,
      print_command_output: false
    )
    puts lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    puts lane_context[SharedValues::GRADLE_ALL_APK_OUTPUT_PATHS]
    puts lane_context[SharedValues::GRADLE_FLAVOR]
    puts lane_context[SharedValues::GRADLE_BUILD_TYPE]
    upload_apk_to_fir(app_key:"9611b6a99d280463039cbb64b7eb24ca")
    # crashlytics

    # sh "your_script.sh"
    # You can also use other beta testing services here
  end
=begin
  desc "Deploy a new version to the Google Play"
  lane :deploy do |options|
    gradle(task: "clean assembleRelease")
    upload_to_play_store
  end

  private_lane :create_properties do |options|
    create_local_properties(user: 'your_user_name', password: 'your_password')
  end

  private_lane :assemble_test do |options|
    create_properties
    gradle(
      task: "clean"
    )
    gradle(
      task: "assembleGmtest",
      print_command_output: false
    )
  end
=end
  after_each do |lane, options|
    # ...
  end

  after_all do |lane, options|
    # ...
  end

  error do |lane, exception, options|
    if options[:debug]
      puts "Hi :)"
    end
    UI.message(exception.message)
  end

end
